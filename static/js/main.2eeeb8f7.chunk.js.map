{"version":3,"sources":["Components/AppHeader.jsx","Components/TodoItem.jsx","Components/TodoList.jsx","App.js","requestManager.js","serviceWorker.js","index.js"],"names":["AppHeader","className","TodoItem","props","type","checked","todo","selected","onChange","e","toggleTodo","id","done","content","TodoList","todoitems","todos","map","key","App","React","useState","setTodos","useEffect","fetch","method","then","response","json","newTodo","setNewTodo","showActions","setShowActions","some","handlerNewTodo","btn","document","querySelector","input","target","value","headers","body","JSON","stringify","createTodo","placeholder","onClick","filter","todoId","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2eeeb8f7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function AppHeader() {\r\n  return (\r\n    <div className=\"card-header\">\r\n      <h3 className=\"card-title\">TodoList (application on React)</h3>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function TodoItem(props) {\r\n  return (\r\n    <li className=\"list-group-item d-flex justify-content-between\">\r\n      <label>\r\n        <input \r\n          type=\"checkbox\" \r\n          className=\"mr-3\" \r\n          checked={props.todo.selected} \r\n          onChange={e => props.toggleTodo(props.todo.id)} \r\n        />\r\n        <span className={props.todo.done ? \"item-done\" : \"\"}>{props.todo.content}</span>\r\n      </label>\r\n      <small className=\"text-muted\">12.04.2020</small>\r\n    </li>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nexport default function TodoList(props) {\r\n\r\n  const todoitems = props.todos.map(todo => (\r\n    <TodoItem todo={todo} key={todo.id} toggleTodo={props.toggleTodo} />\r\n  ))\r\n\r\n  return (\r\n    <ul className=\"list-group\">\r\n        { todoitems }\r\n    </ul>\r\n  )\r\n}\r\n","import React from \"react\";\nimport AppHeader from \"./Components/AppHeader\";\nimport TodoList from \"./Components/TodoList\";\n// import './index.css';\nimport { getAll, createTodo } from './requestManager';\n\n\n\n\nfunction App () {\n  const [todos, setTodos] = React.useState([])\n  \n\n  React.useEffect(\n    () => getAll().then(todos => setTodos(todos)),\n    []\n  )\n\n\n  const [newTodo, setNewTodo] = React.useState(\"\")\n\n  const [showActions, setShowActions] = React.useState(false)\n  React.useEffect(\n    () => {\n      setShowActions(todos.some(todo => todo.selected || todo.done))\n    },\n    [todos]\n  )\n\n  const toggleTodo = todoId => {\n    const todo = todos.find(todo => todo.id === todoId)\n    todo.selected = !todo.selected\n\n    setTodos([...todos])\n  }\n\n  const setDone = () => {\n    for (const todo of todos) {\n      if (todo.selected) {\n        todo.done = true\n        todo.selected = false\n      }\n    }\n\n    setTodos([...todos])\n  }\n\n  const removeSelected = () => {\n    setTodos(todos.filter(todo => !todo.selected))\n  }\n\n  const handlerNewTodo = e => {\n    const btn = document.querySelector(\".btn-add\")\n    const input = document.querySelector(\".form-control\")\n    if (e.target === btn && input.value !== \"\") {\n      const todo = {\n        // id: 1 + Math.max(0, ...todos.map(todo => todo.id)),\n        done: false,\n        content: newTodo,\n        selected: false\n      }\n      \n      setTodos([todo, ...todos])\n\n      createTodo(todo).then(todo => setTodos([todo, ...todos]))\n      \n      setNewTodo(\"\")\n      \n    }\n    else {\n      setNewTodo(e.target.value)\n    }\n  }\n\n  return (\n    <div className=\"py-1 application container d-flex flex-column align-items-stretch\">\n      <div className=\"card h-100\">\n        <AppHeader />\n\n        <input \n        type=\"text\" \n        placeholder=\"Enter what to do ( and select check to see all buttons)\"\n        className=\"form-control\"\n        value={newTodo}\n        onChange={handlerNewTodo}\n        />\n\n        <div className=\"ml-auto\">\n            <div className=\"btn-group\">\n              <button type=\"button\" className=\"btn btn-add\"  onClick={handlerNewTodo}>ADD</button>\n\n              {\n                showActions ?\n                (<div>\n                  <button type=\"button\" className=\"btn btn-primary\" onClick={setDone}>\n                  DONE\n                </button>\n                <button type=\"button\" className=\"btn btn-danger\" onClick={removeSelected}>\n                  DELETE\n                </button></div>\n                ) : \"\"\n              }\n\n            </div>\n        </div>\n        \n        <div className=\"overflow-auto\">\n          <TodoList todos={todos} toggleTodo={toggleTodo} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","\r\n\r\nexport function getAll () {\r\n  return fetch('/todoItems', {\r\n    method: \"GET\"\r\n  }).then(response => response.json())\r\n}\r\n\r\nexport function getById (id) {\r\n  return fetch('/todoItems/', +id, {\r\n    method: \"GET\"\r\n  }).then(response => response.json())\r\n}\r\n\r\nexport function createTodo (todo) {\r\n  return fetch('/todoItems', {\r\n    method: \"POST\",\r\n    headers: {\r\n      'content-type': \"application/json\"\r\n    },\r\n    body: JSON.stringify(todo)\r\n\r\n  }).then(response => response.json())\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}